#!/usr/bin/env bash

# the releases page version does not line up with the kotlin version
# so fetch the native-x.y.z version from the releases page
get_native_download_url () {
  version=$1
  check_url=$2
  platform=$3

  local grep_command=""
  local native_filename=""
  if [[ $platform == "linux" ]]; then
    native_filename="kotlin-native-linux-\d\.\d\.\d.tar.gz"
    grep_command="grep -P"
  elif [[ $platform == "darwin" ]]; then
    native_filename="kotlin-native-macos-\d\.\d\.\d.tar.gz"
    grep_command="grep -E"
  fi

  local check_regex="/JetBrains/kotlin/releases/download/v${version}/${native_filename}"
  local check_native=$(curl "${check_url}" | $grep_command "${check_regex}" | cut -f2 -d '"')
  echo $check_native
}

install () {
  local install_type=$1
  local version=$2
  local install_path=$3
  local platform=""
  local tempdir=""

  local github_prefix="https://github.com/JetBrains/kotlin/releases"

  [ "Linux" = "$(uname)" ] && platform="linux" || platform="darwin"
  [ "linux" = "${platform}" ] && tempdir=$(mktemp -d asdf-kotlin.XXXX) || tempdir=$(mktemp -dt asdf-kotlin)

  curl -L "${github_prefix}/download/v${version}/kotlin-compiler-${version}.zip" -o "${tempdir}/kotlin-compiler.zip"
  unzip -qq "${tempdir}/kotlin-compiler.zip" -d "${install_path}"

  local check_url="${github_prefix}/tag/v${version}"
  local native_download_url=$(get_native_download_url $version $check_url $platform)
  if [[ ! -z $native_download_url ]]; then
    local native_install_path="${install_path}/kotlin-native"

    curl -fL "https://github.com${native_download_url}" -o "${tempdir}/kotlin-native.tar.gz" && \
    mkdir -p "${native_install_path}" && \
    tar -xf "${tempdir}/kotlin-native.tar.gz" --strip-components=1 --directory "${native_install_path}"
  fi

  rm -rf "${tempdir}"
}

install "${ASDF_INSTALL_TYPE}" "${ASDF_INSTALL_VERSION}" "${ASDF_INSTALL_PATH}"
